@page "/matchsport"
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS
<link href="css/ab.css" rel="stylesheet" />
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700;900&display=swap" rel="stylesheet">

<div class="v250_195">
    <div class="wrapper">
       
        @if (!string.IsNullOrEmpty(ImageUrl))
        {
            <img src="@ImageUrl" alt="Ảnh đại diện" class="profile-image" />
        }
        else
        {
            <img src="/img/v250_245.png" alt="Ảnh đại diện mặc định" class="profile-image" />
        }

        <div class="v250_247"><span class="v250_248">Thông tin cơ bản</span></div>
       
        <div class="v250_249"><span class="v250_250">Thông tin liên hệ</span></div>
        <div class="v250_2499">
            <span class="v250_2500">Thông tin trận đấu</span>

            @if (CurrentMatch != null)
            {
                <div class="v250_2511">
                    <span class="v250_2522">Tên sân: @CurrentMatch.Info</span>
                </div>
                <div class="match-buttons">
                    <button class="btn btn-danger mt-2" @onclick="CancelMatch">Hủy</button>
                </div>
            }
            else
            {
                <div class="match-buttons">
                    <button class="btn btn-primary mt-2" @onclick="RequestMatch">Yêu cầu ghép cặp</button>
                </div>
            }
        </div>


        <div class="v250_251"><span class="v250_252">Họ và tên: @TeamName</span></div>
        <div class="v250_253"><span class="v250_254">Địa chỉ: @Address</span></div>
        <div class="v250_captain">
            <span class="v250_captain_label">Đội trưởng: @CaptainName</span>
        </div>
        <div class="v250_255"><span class="v250_256">Giới tính: @Gender</span></div>
        <div class="v250_257"><span class="v250_258">Số điện thoại: @PhoneNumber</span></div>
        <div class="v250_259"><span class="v250_260">E-mail: @Email</span></div>
        <div class="v250_261"><span class="v250_262">Trình độ: @Level</span></div>

        <div class="v250_263">
            <span class="v250_264">Bộ môn: @string.Join(", ", Sports)</span>
        </div>

        <div class="v250_265"><span class="v250_266">Lời giới thiệu</span></div>
        <span class="v250_267">@Introduction</span>

        <!-- Trận đấu -->
        
    </div>
</div>

@code {
    private string TeamName;
    private string Address;
    private string Gender;
    private string PhoneNumber;
    private string Email;
    private string Level;
    private string Introduction;
    private string ImageUrl;
    private string CaptainName;
    private List<string> Sports = new List<string>();
    private Match? CurrentMatch;

    private HubConnection hubConnection;

    protected override async Task OnInitializedAsync()
    {
        var teamInfo = await Http.GetFromJsonAsync<TeamInfo>("api/teaminfo");

        if (teamInfo != null)
        {
            UpdateTeamInfo(teamInfo);
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/teamhub"))
            .Build();

        hubConnection.On<TeamInfo>("ReceiveTeamInfoUpdate", (updatedTeamInfo) =>
        {
            UpdateTeamInfo(updatedTeamInfo);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private void UpdateTeamInfo(TeamInfo teamInfo)
    {
        TeamName = teamInfo.TeamName;
        Address = teamInfo.Address;
        Gender = teamInfo.Gender;
        PhoneNumber = teamInfo.PhoneNumber;
        Email = teamInfo.Email;
        Level = teamInfo.Level;
        Introduction = teamInfo.Introduction;
        ImageUrl = teamInfo.ImageUrl;
        Sports = teamInfo.Sports ?? new List<string>();
        CaptainName = string.IsNullOrEmpty(teamInfo.CaptainName) ? "Chưa có đội trưởng" : teamInfo.CaptainName;

        // Hiển thị trận đầu tiên nếu có
        CurrentMatch = teamInfo.Matches?.FirstOrDefault();
    }

    private async Task RequestMatch()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

        if (!string.IsNullOrEmpty(token))
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "https://api.example.com/api/match/request");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Gửi yêu cầu ghép cặp thành công!");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Lỗi khi gửi yêu cầu.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Bạn chưa đăng nhập!");
        }
    }

    private async Task CancelMatch()
    {
        var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwtToken");

        if (!string.IsNullOrEmpty(token))
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "https://api.example.com/api/match/cancel");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("alert", "Đã hủy ghép cặp.");
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Lỗi khi hủy ghép cặp.");
            }
        }
        else
        {
            await JS.InvokeVoidAsync("alert", "Bạn chưa đăng nhập!");
        }
    }

    public class TeamInfo
    {
        public string TeamName { get; set; }
        public string Address { get; set; }
        public string Gender { get; set; }
        public string PhoneNumber { get; set; }
        public string Email { get; set; }
        public string Level { get; set; }
        public string Introduction { get; set; }
        public string ImageUrl { get; set; }
        public string CaptainName{ get; set; }
        public List<string> Sports { get; set; }
        public List<Match> Matches { get; set; }
    }

    public class Match
    {
        public string Info { get; set; } // Tên sân
        public string Status { get; set; }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
<style>
    .match-buttons {
        margin-top: 10px;
        margin-left: 650px;

    }

    .v250_captain {
        width: 396px;
        height: 40px;
        background: rgba(245,245,245,1);
        margin: 10px;
        opacity: 1;
        position: absolute;
        top: 272px; /* Bạn có thể chỉnh lại vị trí top sao cho không chồng lên phần khác */
        left: 1330px; /* giữ nguyên hoặc chỉnh theo layout */
        border-radius: 20px;
        overflow: hidden;
    }

    .v250_captain_label {
        width: 229px;
        color: rgba(0,0,0,1);
        position: absolute;
        top: 8px;
        left: 10px;
        font-size: 16px;
        opacity: 1;
        text-align: left;
    }

    </style>