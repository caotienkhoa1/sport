@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="login-container">
    <div class="left">
        <div class="form-wrapper">
            <h1>Đăng ký</h1>
            <p class="subtitle">Đăng ký để tìm đối của bạn</p>

            <label for="email">Email</label><br />
            <input id="email" type="email" placeholder="john.doe@gmail.com" @bind="Email" />
            @if (!string.IsNullOrEmpty(EmailError))
            {
                <p class="input-error">@EmailError</p>
            }
            <br /><br />

            <label for="password">Password</label><br />
            <div style="position: relative;">
                <input id="password" type="@PasswordInputType" placeholder="•••••••••••••••••••••••••" @bind="Password" />
                <button type="button" class="showpass" @onclick="TogglePasswordVisibility" style="position:absolute; right:10px; top:50%; transform: translateY(-50%); background:none; border:none; cursor:pointer;">
                    @if (IsPasswordVisible)
                    {
                        <span>👁️</span>
                    }
                    else
                    {
                        <span>🙈</span>
                    }
                </button>
            </div>
            @if (!string.IsNullOrEmpty(PasswordError))
            {
                <p class="input-error">@PasswordError</p>
            }

            <div class="flex-row" style="margin-top: 20px;">
                <div class="left-row">
                    <input id="remember" type="checkbox" @bind="RememberMe" />
                    <label for="remember">Ghi nhớ</label>
                </div>
                <div class="right-row">
                    <a href="./forgot-password">Quên mật khẩu</a>
                </div>
            </div>

            <button class="btnLogin" @onclick="OnLoginClicked" disabled="@IsLoading">
                @(IsLoading ? "Đang đăng nhập..." : "Đăng nhập")
            </button>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <p class="input-error" style="margin-top: 10px;">@ErrorMessage</p>
            }

            <p class="register-text">
                Bạn không có tài khoản? <a href="/register">Đăng ký</a>
            </p>
            <p class="or-login">
                Đăng nhập với
            </p>
            <div class="social-login">
                <button class="social-btn facebook" aria-label="Login with Facebook" @onclick="() => StartOAuthLogin(facebookProvider)">
                    <img src="/img/facebook-logo.png" alt="Facebook" />
                </button>
                <button class="social-btn google" aria-label="Login with Google" @onclick="() => StartOAuthLogin(googleProvider)">
                    <img src="/img/google-logo.png" alt="Google" />
                </button>
            </div>
        </div>
    </div>

    <div class="right" style="background-image: url('/img/Group 4.png');"></div>
</div>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private bool RememberMe { get; set; }
    private bool IsPasswordVisible { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private string ErrorMessage { get; set; }
    private string EmailError { get; set; }
    private string PasswordError { get; set; }

    private string PasswordInputType => IsPasswordVisible ? "text" : "password";

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }

    private bool ValidateInput()
    {
        EmailError = null;
        PasswordError = null;
        ErrorMessage = null;

        bool isValid = true;

        if (string.IsNullOrWhiteSpace(Email))
        {
            EmailError = "Email không được để trống";
            isValid = false;
        }
        else if (!IsValidEmail(Email))
        {
            EmailError = "Email không hợp lệ";
            isValid = false;
        }

        if (string.IsNullOrWhiteSpace(Password))
        {
            PasswordError = "Mật khẩu không được để trống";
            isValid = false;
        }

        return isValid;
    }

    private bool IsValidEmail(string email)
    {
        try
        {
            var addr = new System.Net.Mail.MailAddress(email);
            return addr.Address == email;
        }
        catch
        {
            return false;
        }
    }

    private async Task OnLoginClicked()
    {
        if (!ValidateInput())
        {
            return;
        }

        IsLoading = true;

        try
        {
            var loginData = new
            {
                email = Email,
                password = Password
            };

            var response = await Http.PostAsJsonAsync("https://api.example.com/api/auth/login", loginData);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();

                if (!string.IsNullOrEmpty(result?.Token))
                {
                    // Lưu token vào localStorage
                    await JS.InvokeVoidAsync("localStorage.setItem", "jwtToken", result.Token);

                    // Điều hướng sau khi login thành công
                    Navigation.NavigateTo("/");
                }
                else
                {
                    ErrorMessage = "Token không hợp lệ từ server.";
                }
            }
            else
            {
                ErrorMessage = "Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Lỗi kết nối: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }

    private string facebookProvider = "facebook";
    private string googleProvider = "google";

    private async Task StartOAuthLogin(string provider)
    {
        // URL backend xử lý OAuth
        string oauthUrl = $"https://api.example.com/api/auth/oauth/{provider}";

        // Mở popup login OAuth và xử lý token từ server
        var jsCode = $@"
            var width = 600, height = 700;
            var left = (screen.width / 2) - (width / 2);
            var top = (screen.height / 2) - (height / 2);
            var popup = window.open('{oauthUrl}', 'OAuthLogin', 'width=' + width + ',height=' + height + ',top=' + top + ',left=' + left);
            window.addEventListener('message', function(event) {{
                if(event.origin === '{new Uri(oauthUrl).GetLeftPart(UriPartial.Authority)}' && event.data?.token) {{
                    localStorage.setItem('jwtToken', event.data.token);
                    popup.close();
                    window.location.href = '/';
                }}
            }});
        ";

        await JS.InvokeVoidAsync("eval", jsCode);
    }
}

<style>
    .login-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
        height: 100vh;
        background: white;
    }

    .left {
        width: 50%;
        padding: 3rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .form-wrapper {
        max-width: 350px;
        width: 100%;
    }

        .form-wrapper h1 {
            font-family: 'Poppins', sans-serif;
            font-weight: 600;
            font-size: 40px;
            color: #313131;
        }

    .subtitle {
        font-family: 'Poppins', sans-serif;
        font-weight: 400;
        font-size: 16px;
        color: #313131;
        opacity: 0.75;
    }

    label {
        font-family: 'Poppins', sans-serif;
        font-size: 14px;
        color: #1C1B1F;
    }

    input[type="email"],
    input[type="password"],
    input[type="text"] {
        padding: 0.75rem 1rem;
        font-size: 16px;
        border: 1px solid #79747E;
        border-radius: 4px;
        width: 100%;
        box-sizing: border-box;
    }

    .input-error {
        color: #d93025;
        font-size: 12px;
        margin-top: 4px;
        margin-bottom: 8px;
        font-family: 'Poppins', sans-serif;
    }

    .flex-row {
        display: flex;
        justify-content: space-between;
        margin-top: 20px;
        align-items: center;
    }

    .left-row label {
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        font-size: 14px;
        color: #313131;
    }

    .right-row a {
        color: #FF8682;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        font-size: 14px;
        text-decoration: none;
    }

    .btnLogin {
        background-color: #515DEF;
        color: #F3F3F3;
        padding: 0.75rem 0;
        font-family: 'Poppins', sans-serif;
        font-weight: 600;
        font-size: 14px;
        border: none;
        border-radius: 4px;
        margin-top: 1rem;
        cursor: pointer;
        width: 100%;
    }

        .btnLogin:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

    .register-text {
        margin-top: 1rem;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        font-size: 14px;
        color: #313131;
    }

        .register-text a {
            color: #FF8682;
            text-decoration: none;
        }

    .right {
        width: 50%;
        height: 70%;
        background-size: auto;
        background-position: center;
        background-repeat: no-repeat;
        border-radius: 30px 0 0 30px;
    }

    .or-login {
        display: flex;
        align-items: center;
        color: #9E9E9E;
        margin: 1.5rem 0 1rem 0;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        font-size: 14px;
        text-align: center;
    }

        .or-login::before,
        .or-login::after {
            content: "";
            flex: 1;
            border-bottom: 1px solid #9E9E9E;
            margin: 0 10px;
        }

    .social-login {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
    }

    .social-btn {
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        background-color: white;
        cursor: pointer;
        transition: box-shadow 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
    }

        .social-btn img {
            width: 24px;
            height: 24px;
        }

        .social-btn:hover {
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);
        }

        .social-btn.facebook {
            border-color: #3b5998;
        }

        .social-btn.google {
            border-color: #db4437;
        }
</style>
