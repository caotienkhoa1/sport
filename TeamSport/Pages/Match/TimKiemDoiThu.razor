@page "/find"
@inject HttpClient Http
@inject IJSRuntime JS

<div class="container-wrapper">
    <aside class="filter-sidebar">
        <h3>Bộ lọc</h3>
        <label><input type="checkbox" @bind="filterFootball" /> Bóng đá</label><br />
        <label><input type="checkbox" @bind="filterBadminton" /> Cầu lông</label><br />
        <label><input type="checkbox" @bind="filterPickleball" /> Pickleball</label><br />

        <div class="search-section">
            <input type="text" placeholder="Tìm theo tên..." @bind="searchName" @bind:event="oninput" />
        </div>
    </aside>


    <section class="card-container">
        <p><strong>Tổng số đối thủ:</strong> @opponents.Count()</p>

        <div class="card-list">
            @if (opponents.Any())
            {
                @foreach (var opponent in opponents)
                {
                    <div class="opponent-card @(selectedOpponent == opponent ? "selected" : "")" @onclick="() => SelectOpponent(opponent)">
                        <img src="@GetAvatarUrl(opponent)" alt="Avatar" class="avatar" />
                        <h3>@opponent.FullName</h3>
                        <p><strong>Giới tính:</strong> @opponent.Gender</p>
                        <p><strong>Tuổi:</strong> @opponent.Age</p>
                        <p><strong>Bộ môn:</strong> @opponent.Sport</p>
                        <p><strong>Trình độ:</strong> @opponent.Level</p>
                        <button @onclick:stopPropagation="true" @onclick="() => SelectOpponent(opponent)">Chọn</button>
                    </div>
                }
            }
            else
            {
                <p class="no-results">Không tìm thấy đối thủ phù hợp.</p>
            }
        </div>

        @if (selectedOpponent != null)
        {
            <div class="modal-overlay" @onclick="CloseModal">
                <div class="modal-content" @onclick:stopPropagation>
                    <button class="close-btn" @onclick="CloseModal">×</button>
                    <img src="@GetAvatarUrl(selectedOpponent)" alt="Avatar" class="avatar-large" />
                    <h2>@selectedOpponent.FullName</h2>
                    <p><strong>Giới tính:</strong> @selectedOpponent.Gender</p>
                    <p><strong>Tuổi:</strong> @selectedOpponent.Age</p>
                    <p><strong>Bộ môn:</strong> @selectedOpponent.Sport</p>
                    <p><strong>Trình độ:</strong> @selectedOpponent.Level</p>
                    <p class="modal-message">Bạn muốn xem đối thủ này</p>

                    <button class="confirm-btn" @onclick="ConfirmSelection">Xác nhận</button>
                </div>
            </div>
        }
    </section>
</div>

@code {
    private List<Opponent> opponents = new();
    private Opponent? selectedOpponent;

    private bool filterFootball = true;
    private bool filterBadminton = true;
    private bool filterPickleball = true;
    private string searchName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadOpponentsAsync();
    }
    private bool FilterFootball
    {
        get => filterFootball;
        set
        {
            if (filterFootball != value)
            {
                filterFootball = value;
                OnFilterChanged();
            }
        }
    }
    private async Task LoadOpponentsAsync()
    {
        try
        {
            // Lấy token từ local storage hoặc nơi lưu token
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt_token");

            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                // Xây dựng query param filter
                var sports = new List<string>();
                if (filterFootball) sports.Add("Bóng đá");
                if (filterBadminton) sports.Add("Cầu lông");
                if (filterPickleball) sports.Add("Pickleball");

                var querySports = string.Join(",", sports);
                var url = $"/api/opponents?sports={Uri.EscapeDataString(querySports)}&name={Uri.EscapeDataString(searchName)}";

                opponents = await Http.GetFromJsonAsync<List<Opponent>>(url) ?? new List<Opponent>();
            }
            else
            {
                opponents = new List<Opponent>(); // Không có token
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi tải dữ liệu: " + ex.Message);
            opponents = new List<Opponent>();
        }
        StateHasChanged();
    }

    private void SelectOpponent(Opponent opponent)
    {
        selectedOpponent = opponent;
        Console.WriteLine($"Đã chọn đối thủ: {opponent.FullName}");
    }

    private void CloseModal()
    {
        selectedOpponent = null;
    }

    @inject NavigationManager Navigation

    private async Task ConfirmSelection()
    {
        if (selectedOpponent == null)
            return;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "jwt_token");
            if (!string.IsNullOrEmpty(token))
            {
                Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.PostAsJsonAsync("/api/opponents/select", new { opponentId = selectedOpponent.Id });
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Xác nhận đối thủ thành công!");

                    // Chuyển hướng sang trang matchsport với Id đối thủ
                    Navigation.NavigateTo($"/matchsport/{selectedOpponent.Id}");

                    selectedOpponent = null;
                }
                else
                {
                    Console.WriteLine("Xác nhận thất bại");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Lỗi khi xác nhận: " + ex.Message);
        }
    }


    private void OnFilterChanged(ChangeEventArgs? e = null)
    {
        _ = LoadOpponentsAsync();
    }

    private string GetAvatarUrl(Opponent opponent)
    {
        return opponent.Gender == "Nữ"
            ? "https://i.pravatar.cc/100?img=47"
            : "https://i.pravatar.cc/100?img=12";
    }

    public class Opponent
    {
        public int Id { get; set; }
        public string FullName { get; set; } = "";
        public string Gender { get; set; } = "";
        public int Age { get; set; }
        public string Sport { get; set; } = "";
        public string Level { get; set; } = "";
    }
}


<style>
    body {
        margin: 0;
        padding: 0;
        background-image: url('/img/find.png');
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
        background-attachment: fixed;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container-wrapper {
        display: flex;
        gap: 30px;
        padding: 20px;
        flex-wrap: wrap;
    }

    .filter-sidebar {
        width: 250px;
        padding: 20px;
        border: 1px solid #ddd;
        background-color: #f9f9f9;
        border-radius: 10px;
        align-self: flex-start;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .search-section input[type="text"] {
        width: 100%;
        padding: 8px 10px;
        margin-top: 10px;
        border-radius: 6px;
        border: 1px solid #ccc;
        font-size: 1rem;
    }

    .card-container {
        flex: 1 1 600px;
        min-width: 300px;
    }

    .card-list {
        display: flex;
        flex-wrap: wrap;
        gap: 40px;
    }

    .opponent-card {
        width: 220px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 10px;
        padding: 15px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        text-align: center;
        cursor: pointer;
        transition: box-shadow 0.3s ease, transform 0.2s ease;
        user-select: none;
        position: relative;
    }

        .opponent-card:hover {
            box-shadow: 0 5px 15px rgba(0,0,0,0.15);
            transform: translateY(-5px);
        }

        .opponent-card.selected {
            border-color: #007bff;
            box-shadow: 0 0 15px 3px rgba(0,123,255,0.5);
        }

        .opponent-card img.avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            margin-bottom: 10px;
            user-select: none;
        }

        .opponent-card h3 {
            font-size: 1.1rem;
            margin: 5px 0 10px;
            color: #333;
        }

        .opponent-card p {
            margin: 3px 0;
            font-size: 0.9rem;
            color: #555;
        }

        .opponent-card button {
            margin-top: 10px;
            padding: 6px 12px;
            background-color: #007bff;
            border: none;
            color: white;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.9rem;
            user-select: none;
            transition: background-color 0.3s ease;
        }

            .opponent-card button:hover {
                background-color: #0056b3;
            }

    .no-results {
        color: #666;
        font-size: 1.2rem;
        text-align: center;
        width: 100%;
        margin-top: 30px;
    }

    @@media (max-width: 700px) {
        .container-wrapper

    {
        flex-direction: column;
    }

    .filter-sidebar {
        width: 100%;
        margin-bottom: 20px;
    }

    .card-list {
        justify-content: center;
    }

    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0,0,0,0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        padding: 30px;
        border-radius: 12px;
        box-shadow: 0 0 20px rgba(0,0,0,0.3);
        position: relative;
        max-width: 350px;
        width: 90%;
        text-align: center;
    }

    .avatar-large {
        width: 140px;
        height: 140px;
        border-radius: 50%;
        object-fit: cover;
        margin-bottom: 15px;
        margin-left: 60px;
    }

    .close-btn {
        position: absolute;
        top: 8px;
        right: 12px;
        background: none;
        border: none;
        font-size: 28px;
        cursor: pointer;
        color: #333;
    }

    .modal-message {
        font-weight: bold;
        margin-top: 15px;
        font-size: 1.1rem;
        color: #007bff;
    }

    .confirm-btn {
        margin-top: 20px;
        padding: 8px 20px;
        background-color: #28a745; /* màu xanh lá */
        border: none;
        color: white;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s ease;
        user-select: none;
    }

        .confirm-btn:hover {
            background-color: #218838;
        }

</style>
