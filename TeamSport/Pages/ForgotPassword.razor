@page "/forgot-password"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<div class="register-container">
    <div class="left-side"></div>
    <div class="right-side">
        <div>
            <div class="back-to-login">
                <a href="/login">&lt; Quay lại đăng nhập</a>
            </div>

            <div class="form-title">Quên mật khẩu</div>
            <div class="form-subtitle">Đừng lo lắng, điều này xảy ra với tất cả chúng ta. Nhập email của bạn bên dưới để khôi phục mật khẩu</div>
        </div>

        <EditForm Model="@emailModel" OnValidSubmit="HandleValidSubmit">
            <InputText class="single-input" placeholder="Email" type="email" @bind-Value="emailModel.Email" />
            <button type="submit" class="btn-register" disabled="@IsLoading">
                @(IsLoading ? "Đang xử lý..." : "Xác nhận")
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p style="color:@(IsError ? "red" : "green")">@Message</p>
        }

        <div class="login-link">
            Bạn đã nhớ mật khẩu? <a href="/login">Đăng nhập</a>
        </div>
        <p class="or-login">Đăng nhập với</p>

        <div class="social-login">
            <button class="social-btn facebook" aria-label="Login with Facebook" @onclick="() => StartOAuthLogin(facebookProvider)">
                <img src="/img/facebook-logo.png" alt="Facebook" />
            </button>
            <button class="social-btn google" aria-label="Login with Google" @onclick="() => StartOAuthLogin(googleProvider)">
                <img src="/img/google-logo.png" alt="Google" />
            </button>
        </div>
    </div>
</div>

@code {
    private EmailModel emailModel = new();
    private bool IsLoading = false;
    private string Message;
    private bool IsError = false;

    private async Task HandleValidSubmit()
    {
        Message = null;
        IsError = false;
        IsLoading = true;

        try
        {
            // Gọi API backend gửi mail quên mật khẩu, thay URL cho đúng
            var response = await Http.PostAsJsonAsync("https://api.example.com/api/auth/forgot-password", emailModel);

            if (response.IsSuccessStatusCode)
            {
                Message = "Yêu cầu đặt lại mật khẩu đã được gửi tới email của bạn.";
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Message = $"Lỗi khi gửi yêu cầu: {error}";
                IsError = true;
            }
        }
        catch (Exception ex)
        {
            Message = $"Lỗi kết nối: {ex.Message}";
            IsError = true;
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class EmailModel
    {
        public string Email { get; set; } = "";
    }
}
@code {
    private string facebookProvider = "facebook";
    private string googleProvider = "google";
    private async Task LoginWithFacebook()
    {
        await StartOAuthLogin("facebook");
    }

    private async Task LoginWithGoogle()
    {
        await StartOAuthLogin("google");
    }

    private async Task StartOAuthLogin(string provider)
    {
        // URL backend xử lý OAuth
        string oauthUrl = $"https://api.example.com/api/auth/oauth/{provider}";

        // Mở popup login OAuth
        var jsCode = $@"
            var width = 600, height = 700;
            var left = (screen.width / 2) - (width / 2);
            var top = (screen.height / 2) - (height / 2);
            var popup = window.open('{oauthUrl}', 'OAuthLogin', 'width=' + width + ',height=' + height + ',top=' + top + ',left=' + left);
            window.addEventListener('message', function(event) {{
                if(event.origin === '{new Uri(oauthUrl).GetLeftPart(UriPartial.Authority)}' && event.data?.token) {{
                    DotNet.invokeMethodAsync('{typeof(Program).Assembly.GetName().Name}', 'ReceiveOAuthToken', event.data.token);
                    popup.close();
                }}
            }});
        ";

        await JS.InvokeVoidAsync("eval", jsCode);
    }

    [JSInvokable]
    public static async Task ReceiveOAuthToken(string token)
    {
        // Lưu token vào localStorage hoặc làm gì đó
        // Vì đây là static method, bạn có thể trigger event hoặc callback về instance của component nếu muốn
        Console.WriteLine($"Received token: {token}");

        // Ví dụ: gọi API lưu token, chuyển trang, v.v...
    }
}


<style>
    .register-container {
    display: flex;
    flex-direction: row;
    height: 300px;
    min-height: 100vh;
    font-family: Arial, sans-serif;
    flex-wrap: wrap;
    max-width: 1400px; /* Giới hạn chiều rộng */
    margin: 0 auto; /* Căn giữa theo chiều ngang */
    
    border-radius: 8px;
    overflow: hidden;

    gap: 100px; 



    .left-side {
        flex: 1 1 300px;
        min-height: 300px;
        background: url('/img/5.png') no-repeat center center;
        background-size: cover;
        border-top-left-radius: 30px;
        border-top-right-radius: 30px;
        border-bottom-left-radius: 30px;
        border-bottom-right-radius: 30px;
    }

    .right-side {
        flex: 1 1 400px;
        padding: 2rem;
        display: flex;
        flex-direction: column;
        justify-content: center;
        background-color: white;
    }

    .form-title {
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 0.3rem;
    }

    .form-subtitle {
        font-size: 1rem;
        color: #555;
        margin-bottom: 1.5rem;
    }

    .input-group {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        flex-wrap: wrap;
    }

    .input-name {
        flex: 1;
        min-width: 0;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 6px;
    }

    .single-input {
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 1px solid #ccc;
        border-radius: 6px;
        margin-bottom: 1rem;
    }

    .terms-container {
        display: flex;
        align-items: center;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
        color: #333;
    }

        .terms-container span {
            margin-left: 0.5rem;
        }

    .btn-register {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 0.85rem;
        font-size: 1.1rem;
        width: 100%;
        border-radius: 6px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .btn-register:hover {
            background-color: #0056b3;
        }

    .login-link {
        margin-top: 1rem;
        font-size: 0.95rem;
        text-align: center;
    }

        .login-link a {
            color: #007bff;
            text-decoration: none;
        }

            .login-link a:hover {
                text-decoration: underline;
            }

    .back-to-login {
        margin-bottom: 1rem;
    }

        .back-to-login a {
            color: #313131;
            font-size: 0.8rem;
            text-decoration: none;
            font-weight: bold;
        }

            .back-to-login a:hover {
                text-decoration: underline;
            }

    .or-login {
        text-align: center;
        color: #9E9E9E;
        margin: 1.5rem 0 1rem 0;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        font-size: 14px;
    }

    .social-login {
        display: flex;
        justify-content: center;
        gap: 1.5rem;
    }

    .social-btn {
        border: 1px solid #ddd;
        border-radius: 6px;
        padding: 0.5rem 1rem;
        background-color: white;
        cursor: pointer;
        transition: box-shadow 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 48px;
        height: 48px;
    }

        .social-btn img {
            width: 24px;
            height: 24px;
        }

        /* Hover effect */
        .social-btn:hover {
            box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);
        }

        /* Optional: màu nền riêng cho từng mạng xã hội */
        .social-btn.facebook {
            border-color: #3b5998;
        }

        .social-btn.google {
            border-color: #db4437;
        }

    .or-login {
        display: flex;
        align-items: center;
        color: #9E9E9E;
        margin: 1.5rem 0 1rem 0;
        font-family: 'Poppins', sans-serif;
        font-weight: 500;
        font-size: 14px;
        text-align: center;
    }

        .or-login::before,
        .or-login::after {
            content: "";
            flex: 1;
            border-bottom: 1px solid #9E9E9E;
            margin: 0 10px;
        }

    .logo-top-right {
        position: fixed;
        top: 20px;
        right: 30px;
        z-index: 999;
    }

        .logo-top-right img {
            height: 50px;
            width: auto;
            cursor: pointer;
        }

</style>